<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hurst Systems</title>
    <link>https://hurst.systems/posts/</link>
    <description>Recent content in Posts on Hurst Systems</description>
    <meta name="generator" content="Hugo 0.53" />
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Oct 2018 10:29:23 -0500</lastBuildDate>
    
        <atom:link href="https://hurst.systems/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PowerShell - Error Handling</title>
      <link>https://hurst.systems/posts/powershell-error-handling/</link>
      <pubDate>Tue, 23 Oct 2018 10:29:23 -0500</pubDate>
      
      <guid>https://hurst.systems/posts/powershell-error-handling/</guid>
      <description>Using Try Catch and Finally to perform error handling for PowerShell</description>
    </item>
    
    <item>
      <title>TroubleShooting a Users HomeDrive Auto-Remapping</title>
      <link>https://hurst.systems/posts/troubleshooting-user-homedrive-auto-remapping-issue/troubleshooting-user-homedrive-auto-remapping-issue/</link>
      <pubDate>Wed, 17 Apr 2019 19:29:23 -0500</pubDate>
      
      <guid>https://hurst.systems/posts/troubleshooting-user-homedrive-auto-remapping-issue/troubleshooting-user-homedrive-auto-remapping-issue/</guid>
      <description>Users homedrive mapping automatically changing to different letter after reboot or upon logging into Windows</description>
    </item>
    
    <item>
      <title>Dot-Sourcing in PowerShell</title>
      <link>https://hurst.systems/posts/powershell-dot-sourcing/</link>
      <pubDate>Tue, 20 Nov 2018 14:53:23 -0500</pubDate>
      
      <guid>https://hurst.systems/posts/powershell-dot-sourcing/</guid>
      <description>Dot Sourcing in PowerShell Introduction When writing PowerShell scripts, the best practice is to keep your scripts as simple as possible.
Scripts and functions should do one &amp;ldquo;thing.&amp;rdquo; (multiple VSCode windows?) This helps with troubleshooting since the function is small and does just one thing, and allows for any enhancements to the function we create in the future to be automatically available to every script in which we have used that function.</description>
    </item>
    
    <item>
      <title>Present Working Directory</title>
      <link>https://hurst.systems/posts/powershell-present-working-directory/understanding-present-working-directory-pwd/</link>
      <pubDate>Tue, 20 Nov 2018 14:53:23 -0500</pubDate>
      
      <guid>https://hurst.systems/posts/powershell-present-working-directory/understanding-present-working-directory-pwd/</guid>
      <description>Understanding your location - ($pwd / Get-Location) $pwd is an automatic variable which contains PowerShell&amp;rsquo;s current location. $pwd, which stands for &amp;ldquo;print working directory&amp;rdquo;, and functions like the PowerShell command &amp;ldquo;Get-Location&amp;rdquo;.
You may see me refer to $pwd as &amp;ldquo;Present Working Directory&amp;rdquo; because it also fits the abbreviation and it was always easier for me to remember its function.
VSCode VSCode sets the $pwd (&amp;ldquo;present working directory”) to the current Workspace location</description>
    </item>
    
    <item>
      <title>Understanding Paths in PowerShell</title>
      <link>https://hurst.systems/posts/powershell-understanding-paths/</link>
      <pubDate>Tue, 20 Nov 2018 14:53:23 -0500</pubDate>
      
      <guid>https://hurst.systems/posts/powershell-understanding-paths/</guid>
      <description>Understanding Paths in PowerShell Absolute and Relative Paths By default, the “present working directory” is not on the PATH by default. This means that you must use relative or absolute paths when specifying a script to run, or when sourcing one script from within another.
The all-important Paths 2 different types of Paths Relative and Absolute
Absolute Path: Like having the “Country, State, City, Street address, floor, room, toolbox, bottom shelf, right side” for directions to where the hammer is located.</description>
    </item>
    
    <item>
      <title>PowerShell Notes</title>
      <link>https://hurst.systems/posts/powershell-notes/</link>
      <pubDate>Thu, 04 Oct 2018 11:29:23 -0500</pubDate>
      
      <guid>https://hurst.systems/posts/powershell-notes/</guid>
      <description>My Notes on PowerShell - So that I can find it again</description>
    </item>
    
    <item>
      <title>PowerShell - Pester Notes</title>
      <link>https://hurst.systems/posts/powershell-pester-notes/</link>
      <pubDate>Sun, 23 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://hurst.systems/posts/powershell-pester-notes/</guid>
      <description>Pester Time to learn Pester. Not so much a blog post as it is a reading/reference list.
What is Pester? &amp;ldquo;Pester is the ubiquitous test and mock framework for PowerShell&amp;rdquo; or in other words, tests written to test the functions you have created without actually running those commands.
Are you asking yourself &amp;ldquo;why bother? just run the code and see if it works?&amp;rdquo; Yeah me too, but seems like everyone is doing it&amp;hellip; so might as well jump off a bridge also, hopefully by the end I will see its value.</description>
    </item>
    
    <item>
      <title>PowerShell - Adding WhatIf and Confirm</title>
      <link>https://hurst.systems/posts/powershell-adding-whatif-and-confirm/</link>
      <pubDate>Thu, 23 Aug 2018 10:29:23 -0500</pubDate>
      
      <guid>https://hurst.systems/posts/powershell-adding-whatif-and-confirm/</guid>
      <description>Adding support for WhatIf and Confirm to your advanced PowerShell functions</description>
    </item>
    
    <item>
      <title>PowerShell - Advanced Functions</title>
      <link>https://hurst.systems/posts/powershell-advanced-functions/</link>
      <pubDate>Fri, 03 Aug 2018 10:29:23 -0500</pubDate>
      
      <guid>https://hurst.systems/posts/powershell-advanced-functions/</guid>
      <description>Advanced Functions when giving a default parameter use
1 2 3 4 5 6 7  [ValidateNotNullOrEmpty()] [CmdletBinding()] param ( [ValidateNotNullOrEmpty()] [string[] ] $Computername = $env:COMPUTERNAME )   Standard and Advanced Functions
PowerShell Advanced Functions: Can we build them better? With parameter validation, yes we can!
About Functions Advanced on PSCore
About Functions Advanced Methods
About Functions Advanced Parameters
Which leads to learning how to use Plaster What is Plaster</description>
    </item>
    
    <item>
      <title>Add Twitter Cards to Blog Tweets</title>
      <link>https://hurst.systems/posts/twittercards/</link>
      <pubDate>Thu, 12 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://hurst.systems/posts/twittercards/</guid>
      <description>I&amp;rsquo;m really late to the blog game, and never really did much but lurk on Twitter. So when I started to blog, and then promoted the posts on Twitter, I noticed it was just an ugly URL link. It didn&amp;rsquo;t stand out at all, in fact it was&amp;hellip; boring&amp;hellip; and this was BEFORE you got to my rambling. So how do all these Tweets end up with such pretty pictures attached to them?</description>
    </item>
    
    <item>
      <title>The Adventure Begins</title>
      <link>https://hurst.systems/posts/the-adventure-begins/</link>
      <pubDate>Tue, 10 Jul 2018 10:29:23 -0500</pubDate>
      
      <guid>https://hurst.systems/posts/the-adventure-begins/</guid>
      <description>Getting it started</description>
    </item>
    
  </channel>
</rss>
